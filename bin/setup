#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

if ! command -v docker >/dev/null ; then
  >&2 echo "ERROR: 'docker' is required to run this. Please install it. https://docs.docker.com/get-docker/"
  exit 1
fi

if ! command -v git >/dev/null ; then
  >&2 echo "ERROR: 'git' is required to run this. Please install it. https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"
  exit 1
fi

if [[ ! -d webapp ]]; then
  git clone git-server/repos/webapp.git
fi

if [[ ! -d git-server ]]; then
  >&2 echo "ERROR: run this script from the project root, where git-server and jenkins are located"
  exit 1
fi

if ! docker ps >/dev/null ; then
  >&2 echo "ERROR: Failed to run 'docker ps'. This could be a permission issue. Does this user have access to run docker?"
  exit 1
fi

if [[ ! -f "${HOME}/.ssh/id_rsa.pub" ]]; then
  >&2 echo "ERROR: Please generate an ssh key with: ssh-keygen -b 2048 -t rsa -q -N ''"
  exit 1
fi

script_dir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
source "${script_dir}/environment_variables_to_source"

function wait_for_job_to_be_created_in_jenkins() {
  local attempts=0

  while true ; do
    if curl -s --fail "http://localhost:${JENKINS_HOST_PORT}/job/Webapp_Pipeline_Deploy"; then
      break;
    elif [[ "$attempts" -gt 100 ]]; then
      >&2 echo "ERROR: could not find job in jenkins after 100 attempts"
      exit 1
    else
      attempts=$(( attempts + 1 ))
      echo "waiting for job to be created in jenkins. attempt: $attempts"
      sleep 1
    fi
  done
}

function wait_for_webapp_to_be_deployed() {
  local attempts=0

  while true ; do
    if curl -s --fail "http://localhost:${WEBAPP_HOST_PORT}" > /dev/null; then
      break;
    elif [[ "$attempts" -gt 100 ]]; then
      >&2 echo "ERROR: could not hit webapp after 100 attempts"
      exit 1
    else
      attempts=$(( attempts + 1 ))
      echo "waiting for webapp to come online. attempt: $attempts"
      sleep 1
    fi
  done
}

function wait_for_git_server_to_start() {
  local attempts=0

  while true ; do
    if curl -s --fail "http://localhost:9090" > /dev/null; then
      break;
    elif [[ "$attempts" -gt 100 ]]; then
      >&2 echo "ERROR: could not hit git-server after 100 attempts"
      exit 1
    else
      attempts=$(( attempts + 1 ))
      echo "waiting for git-server to come online. attempt: $attempts"
      sleep 1
    fi
  done
}

function has_ssh_key() {
  local ssh_key=$1
  curl --fail --silent -H "Authorization: token ${api_token}" http://gogs:gogs@localhost:9090/api/v1/user/keys | grep -qE "\<${ssh_key}\>"
}

# if curl -s --fail "http://localhost:${WEBAPP_HOST_PORT}" > /dev/null; then
#   >&2 echo "ERROR: webapp is already running. this is not expected. please stop the container. you can tear everything down with ./teardown.sh"
#   exit 1
# fi

docker-compose up -d

docker cp ./git-server/app.ini jenkins-ci-cd-demo_git-server_1:/data/gogs/conf/app.ini
docker-compose restart git-server
wait_for_git_server_to_start

curl --silent --fail 'http://localhost:9090/user/sign_up' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  --data-raw '_csrf=m_nby7PBgS2N31qm2GLltYTO0yo6MTY1MDkxMTM1NDIzMTE5MTE3MQ%3D%3D&user_name=gogs&email=gogs%40example.com&password=gogs&retype=gogs' \
  --insecure >/dev/null

api_token=$(curl --silent --fail -X POST -H "content-type: application/json" -d '{"name":"gogs_api_token"}' http://gogs:gogs@localhost:9090/api/v1/users/gogs/tokens | sed -E 's/.*"sha1":"([^\"]+)".*/\1/')
if [[ -z "$api_token" ]]; then
  >&2 echo "ERROR: Could not get api_token from git-server"
  exit 1
fi
if ! curl --silent --fail -H "Authorization: token ${api_token}" -H "content-type: application/json" http://gogs:gogs@localhost:9090/api/v1/repos/gogs/webapp >/dev/null ; then
  curl --silent -X POST --fail -H "Authorization: token ${api_token}" -H "content-type: application/json" -d '{"name":"webapp"}' http://gogs:gogs@localhost:9090/api/v1/user/repos >/dev/null
fi

if ! has_ssh_key "gogs_key" ; then
  public_key=$(cat "${HOME}/.ssh/id_rsa.pub")
  curl --fail --silent -X POST -H "Authorization: token ${api_token}" -H "content-type: application/json" -d "{\"title\":\"gogs_key\",\"key\":\"${public_key}\"}" http://gogs:gogs@localhost:9090/api/v1/user/keys
fi

curl --fail --silent -X POST -H "Authorization: token ${api_token}" -H "content-type: application/json" \
  -d '{
    "type": "gogs",
    "config": {
        "url": "http://jenkins:8080/gogs-webhook/?job=Webapp_Pipeline_Deploy",
        "content_type": "json"
    },
    "events": [
        "create",
        "delete",
        "fork",
        "push",
        "issues",
        "issue_comment",
        "pull_request",
        "release"
    ],
    "active": true
 }' \
 http://gogs:gogs@localhost:9090/api/v1/repos/gogs/webapp/hooks

cd webapp
git remote set-url origin ssh://git@localhost:9022/gogs/webapp.git
GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no' git push -u origin main

if ! has_ssh_key "jenkins_key" ; then
  docker cp jenkins:/root/.ssh/id_rsa.pub /tmp/jenkins_public_key
  jenkins_public_key=$(cat /tmp/jenkins_public_key)
  echo "{\"title\":\"jenkins_key\",\"key\":\"${jenkins_public_key}\"}" >/tmp/jkey_post_body
  curl --fail --silent -X POST -H "Authorization: token ${api_token}" -H "content-type: application/json" --data "@/tmp/jkey_post_body" http://gogs:gogs@localhost:9090/api/v1/user/keys
fi

docker exec jenkins /bin/bash -c "chmod 700 /root/.ssh"
docker exec jenkins /bin/bash -c "chmod 600 /root/.ssh/*"
docker exec jenkins /bin/bash -c "sleep 10 && ssh-keyscan -p 22 git-server >> ~/.ssh/known_hosts"

# need to wait until it actually runs the pipeline-create.groovy before removing it.
wait_for_job_to_be_created_in_jenkins
docker exec jenkins /bin/bash -c "rm -rf /var/jenkins_home/init.groovy.d/pipeline-create.groovy"

echo "kicking off jenkins build for webapp, which will ultimately deploy webapp"
curl --fail -X POST "http://localhost:${JENKINS_HOST_PORT}/job/Webapp_Pipeline_Deploy/build"

wait_for_webapp_to_be_deployed

echo -e "\nwebapp deployed successfully with Jenkins. You can access the following apps in a browser:\n  webapp: http://localhost:${WEBAPP_HOST_PORT}\n  jenkins: http://localhost:${JENKINS_HOST_PORT}"
